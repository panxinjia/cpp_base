#include <iostream>
#include "Complex.h"

using namespace std;

/**
 * 运算符重载
 *  1. 运算符重载规则 2. 自主实现运算符重载 3. 通过重载运算符, 扩展运算符功能
 *
 * > 基础语法
 *  - 语法
 *  - 结合性 ( 大部分运算符都是左结合性 )
 *  - 类中重载运算符
 *  - 类外(全局)重载运算符
 *
 * > 规则详解
 *  - 并不是所有运算符都可以重载
 *  - 不能改变优先级和结合性   ( eg: 先乘除, 后加减 )
 *  - 重载不会改变运算符的用法( eg: 目数, 操作数的左右 )
 *  - 运算符重载不能有默认参数
 *  - 可以作为成员函数, 也可以作为全局函数重载
 *  - -> [] = () 只能以成员函数的形式重载
 *  - 有的运算符最好以全局运算符去重载 ( eg: << >> 输入输出运算符 )
 *
 * > 重载输入输出 << >>
 *  - 建议作为友元函数去重载
 *      需要两个参数, 作为成员去重载的时候会很麻烦
 *
 * > 重点注意事项
 *  - 语法很简单, 关键是规则
 *  - 可以隐式调用, 也可以显式调用
 *  - 注意与友元联合使用的时候
 */
int main(int argc, const char *argv[])
{
    Complex c1(1.0, 2.0);
    Complex c2(3.0, 4.0); 
    c1.display();
    c2.display();

    Complex c3;
    c3 = c1 + c2;
    c3.display();

    c3 = c3 + 10;
    // c3 = operator+(c3, 10);
    c3.display();
    return 0;
}